// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `protos/profile.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:perftools.profiles.Profile)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct Profile {
    // message fields
    // @@protoc_insertion_point(field:perftools.profiles.Profile.sample_type)
    pub sample_type: ::std::vec::Vec<ValueType>,
    // @@protoc_insertion_point(field:perftools.profiles.Profile.sample)
    pub sample: ::std::vec::Vec<Sample>,
    // @@protoc_insertion_point(field:perftools.profiles.Profile.mapping)
    pub mapping: ::std::vec::Vec<Mapping>,
    // @@protoc_insertion_point(field:perftools.profiles.Profile.location)
    pub location: ::std::vec::Vec<Location>,
    // @@protoc_insertion_point(field:perftools.profiles.Profile.function)
    pub function: ::std::vec::Vec<Function>,
    // @@protoc_insertion_point(field:perftools.profiles.Profile.string_table)
    pub string_table: ::std::vec::Vec<::std::string::String>,
    // @@protoc_insertion_point(field:perftools.profiles.Profile.drop_frames)
    pub drop_frames: i64,
    // @@protoc_insertion_point(field:perftools.profiles.Profile.keep_frames)
    pub keep_frames: i64,
    // @@protoc_insertion_point(field:perftools.profiles.Profile.time_nanos)
    pub time_nanos: i64,
    // @@protoc_insertion_point(field:perftools.profiles.Profile.duration_nanos)
    pub duration_nanos: i64,
    // @@protoc_insertion_point(field:perftools.profiles.Profile.period_type)
    pub period_type: ::protobuf::MessageField<ValueType>,
    // @@protoc_insertion_point(field:perftools.profiles.Profile.period)
    pub period: i64,
    // @@protoc_insertion_point(field:perftools.profiles.Profile.comment)
    pub comment: ::std::vec::Vec<i64>,
    // @@protoc_insertion_point(field:perftools.profiles.Profile.default_sample_type)
    pub default_sample_type: i64,
    // special fields
    // @@protoc_insertion_point(special_field:perftools.profiles.Profile.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Profile {
    fn default() -> &'a Profile {
        <Profile as ::protobuf::Message>::default_instance()
    }
}

impl Profile {
    pub fn new() -> Profile {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(14);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "sample_type",
            |m: &Profile| { &m.sample_type },
            |m: &mut Profile| { &mut m.sample_type },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "sample",
            |m: &Profile| { &m.sample },
            |m: &mut Profile| { &mut m.sample },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "mapping",
            |m: &Profile| { &m.mapping },
            |m: &mut Profile| { &mut m.mapping },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "location",
            |m: &Profile| { &m.location },
            |m: &mut Profile| { &mut m.location },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "function",
            |m: &Profile| { &m.function },
            |m: &mut Profile| { &mut m.function },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "string_table",
            |m: &Profile| { &m.string_table },
            |m: &mut Profile| { &mut m.string_table },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "drop_frames",
            |m: &Profile| { &m.drop_frames },
            |m: &mut Profile| { &mut m.drop_frames },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "keep_frames",
            |m: &Profile| { &m.keep_frames },
            |m: &mut Profile| { &mut m.keep_frames },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "time_nanos",
            |m: &Profile| { &m.time_nanos },
            |m: &mut Profile| { &mut m.time_nanos },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "duration_nanos",
            |m: &Profile| { &m.duration_nanos },
            |m: &mut Profile| { &mut m.duration_nanos },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ValueType>(
            "period_type",
            |m: &Profile| { &m.period_type },
            |m: &mut Profile| { &mut m.period_type },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "period",
            |m: &Profile| { &m.period },
            |m: &mut Profile| { &mut m.period },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "comment",
            |m: &Profile| { &m.comment },
            |m: &mut Profile| { &mut m.comment },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "default_sample_type",
            |m: &Profile| { &m.default_sample_type },
            |m: &mut Profile| { &mut m.default_sample_type },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Profile>(
            "Profile",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Profile {
    const NAME: &'static str = "Profile";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.sample_type.push(is.read_message()?);
                },
                18 => {
                    self.sample.push(is.read_message()?);
                },
                26 => {
                    self.mapping.push(is.read_message()?);
                },
                34 => {
                    self.location.push(is.read_message()?);
                },
                42 => {
                    self.function.push(is.read_message()?);
                },
                50 => {
                    self.string_table.push(is.read_string()?);
                },
                56 => {
                    self.drop_frames = is.read_int64()?;
                },
                64 => {
                    self.keep_frames = is.read_int64()?;
                },
                72 => {
                    self.time_nanos = is.read_int64()?;
                },
                80 => {
                    self.duration_nanos = is.read_int64()?;
                },
                90 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.period_type)?;
                },
                96 => {
                    self.period = is.read_int64()?;
                },
                106 => {
                    is.read_repeated_packed_int64_into(&mut self.comment)?;
                },
                104 => {
                    self.comment.push(is.read_int64()?);
                },
                112 => {
                    self.default_sample_type = is.read_int64()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.sample_type {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.sample {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.mapping {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.location {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.function {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.string_table {
            my_size += ::protobuf::rt::string_size(6, &value);
        };
        if self.drop_frames != 0 {
            my_size += ::protobuf::rt::int64_size(7, self.drop_frames);
        }
        if self.keep_frames != 0 {
            my_size += ::protobuf::rt::int64_size(8, self.keep_frames);
        }
        if self.time_nanos != 0 {
            my_size += ::protobuf::rt::int64_size(9, self.time_nanos);
        }
        if self.duration_nanos != 0 {
            my_size += ::protobuf::rt::int64_size(10, self.duration_nanos);
        }
        if let Some(v) = self.period_type.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if self.period != 0 {
            my_size += ::protobuf::rt::int64_size(12, self.period);
        }
        for value in &self.comment {
            my_size += ::protobuf::rt::int64_size(13, *value);
        };
        if self.default_sample_type != 0 {
            my_size += ::protobuf::rt::int64_size(14, self.default_sample_type);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.sample_type {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        for v in &self.sample {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        };
        for v in &self.mapping {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        };
        for v in &self.location {
            ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
        };
        for v in &self.function {
            ::protobuf::rt::write_message_field_with_cached_size(5, v, os)?;
        };
        for v in &self.string_table {
            os.write_string(6, &v)?;
        };
        if self.drop_frames != 0 {
            os.write_int64(7, self.drop_frames)?;
        }
        if self.keep_frames != 0 {
            os.write_int64(8, self.keep_frames)?;
        }
        if self.time_nanos != 0 {
            os.write_int64(9, self.time_nanos)?;
        }
        if self.duration_nanos != 0 {
            os.write_int64(10, self.duration_nanos)?;
        }
        if let Some(v) = self.period_type.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(11, v, os)?;
        }
        if self.period != 0 {
            os.write_int64(12, self.period)?;
        }
        for v in &self.comment {
            os.write_int64(13, *v)?;
        };
        if self.default_sample_type != 0 {
            os.write_int64(14, self.default_sample_type)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Profile {
        Profile::new()
    }

    fn clear(&mut self) {
        self.sample_type.clear();
        self.sample.clear();
        self.mapping.clear();
        self.location.clear();
        self.function.clear();
        self.string_table.clear();
        self.drop_frames = 0;
        self.keep_frames = 0;
        self.time_nanos = 0;
        self.duration_nanos = 0;
        self.period_type.clear();
        self.period = 0;
        self.comment.clear();
        self.default_sample_type = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Profile {
        static instance: Profile = Profile {
            sample_type: ::std::vec::Vec::new(),
            sample: ::std::vec::Vec::new(),
            mapping: ::std::vec::Vec::new(),
            location: ::std::vec::Vec::new(),
            function: ::std::vec::Vec::new(),
            string_table: ::std::vec::Vec::new(),
            drop_frames: 0,
            keep_frames: 0,
            time_nanos: 0,
            duration_nanos: 0,
            period_type: ::protobuf::MessageField::none(),
            period: 0,
            comment: ::std::vec::Vec::new(),
            default_sample_type: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Profile {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Profile").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Profile {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Profile {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:perftools.profiles.ValueType)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct ValueType {
    // message fields
    // @@protoc_insertion_point(field:perftools.profiles.ValueType.type)
    pub type_: i64,
    // @@protoc_insertion_point(field:perftools.profiles.ValueType.unit)
    pub unit: i64,
    // special fields
    // @@protoc_insertion_point(special_field:perftools.profiles.ValueType.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ValueType {
    fn default() -> &'a ValueType {
        <ValueType as ::protobuf::Message>::default_instance()
    }
}

impl ValueType {
    pub fn new() -> ValueType {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "type",
            |m: &ValueType| { &m.type_ },
            |m: &mut ValueType| { &mut m.type_ },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "unit",
            |m: &ValueType| { &m.unit },
            |m: &mut ValueType| { &mut m.unit },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ValueType>(
            "ValueType",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ValueType {
    const NAME: &'static str = "ValueType";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.type_ = is.read_int64()?;
                },
                16 => {
                    self.unit = is.read_int64()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.type_ != 0 {
            my_size += ::protobuf::rt::int64_size(1, self.type_);
        }
        if self.unit != 0 {
            my_size += ::protobuf::rt::int64_size(2, self.unit);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.type_ != 0 {
            os.write_int64(1, self.type_)?;
        }
        if self.unit != 0 {
            os.write_int64(2, self.unit)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ValueType {
        ValueType::new()
    }

    fn clear(&mut self) {
        self.type_ = 0;
        self.unit = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ValueType {
        static instance: ValueType = ValueType {
            type_: 0,
            unit: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ValueType {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ValueType").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ValueType {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ValueType {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:perftools.profiles.Sample)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct Sample {
    // message fields
    // @@protoc_insertion_point(field:perftools.profiles.Sample.location_id)
    pub location_id: ::std::vec::Vec<u64>,
    // @@protoc_insertion_point(field:perftools.profiles.Sample.value)
    pub value: ::std::vec::Vec<i64>,
    // @@protoc_insertion_point(field:perftools.profiles.Sample.label)
    pub label: ::std::vec::Vec<Label>,
    // special fields
    // @@protoc_insertion_point(special_field:perftools.profiles.Sample.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Sample {
    fn default() -> &'a Sample {
        <Sample as ::protobuf::Message>::default_instance()
    }
}

impl Sample {
    pub fn new() -> Sample {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "location_id",
            |m: &Sample| { &m.location_id },
            |m: &mut Sample| { &mut m.location_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "value",
            |m: &Sample| { &m.value },
            |m: &mut Sample| { &mut m.value },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "label",
            |m: &Sample| { &m.label },
            |m: &mut Sample| { &mut m.label },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Sample>(
            "Sample",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Sample {
    const NAME: &'static str = "Sample";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    is.read_repeated_packed_uint64_into(&mut self.location_id)?;
                },
                8 => {
                    self.location_id.push(is.read_uint64()?);
                },
                18 => {
                    is.read_repeated_packed_int64_into(&mut self.value)?;
                },
                16 => {
                    self.value.push(is.read_int64()?);
                },
                26 => {
                    self.label.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.location_id {
            my_size += ::protobuf::rt::uint64_size(1, *value);
        };
        for value in &self.value {
            my_size += ::protobuf::rt::int64_size(2, *value);
        };
        for value in &self.label {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.location_id {
            os.write_uint64(1, *v)?;
        };
        for v in &self.value {
            os.write_int64(2, *v)?;
        };
        for v in &self.label {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Sample {
        Sample::new()
    }

    fn clear(&mut self) {
        self.location_id.clear();
        self.value.clear();
        self.label.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Sample {
        static instance: Sample = Sample {
            location_id: ::std::vec::Vec::new(),
            value: ::std::vec::Vec::new(),
            label: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Sample {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Sample").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Sample {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Sample {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:perftools.profiles.Label)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct Label {
    // message fields
    // @@protoc_insertion_point(field:perftools.profiles.Label.key)
    pub key: i64,
    // @@protoc_insertion_point(field:perftools.profiles.Label.str)
    pub str: i64,
    // @@protoc_insertion_point(field:perftools.profiles.Label.num)
    pub num: i64,
    // @@protoc_insertion_point(field:perftools.profiles.Label.num_unit)
    pub num_unit: i64,
    // special fields
    // @@protoc_insertion_point(special_field:perftools.profiles.Label.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Label {
    fn default() -> &'a Label {
        <Label as ::protobuf::Message>::default_instance()
    }
}

impl Label {
    pub fn new() -> Label {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "key",
            |m: &Label| { &m.key },
            |m: &mut Label| { &mut m.key },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "str",
            |m: &Label| { &m.str },
            |m: &mut Label| { &mut m.str },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "num",
            |m: &Label| { &m.num },
            |m: &mut Label| { &mut m.num },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "num_unit",
            |m: &Label| { &m.num_unit },
            |m: &mut Label| { &mut m.num_unit },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Label>(
            "Label",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Label {
    const NAME: &'static str = "Label";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.key = is.read_int64()?;
                },
                16 => {
                    self.str = is.read_int64()?;
                },
                24 => {
                    self.num = is.read_int64()?;
                },
                32 => {
                    self.num_unit = is.read_int64()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.key != 0 {
            my_size += ::protobuf::rt::int64_size(1, self.key);
        }
        if self.str != 0 {
            my_size += ::protobuf::rt::int64_size(2, self.str);
        }
        if self.num != 0 {
            my_size += ::protobuf::rt::int64_size(3, self.num);
        }
        if self.num_unit != 0 {
            my_size += ::protobuf::rt::int64_size(4, self.num_unit);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.key != 0 {
            os.write_int64(1, self.key)?;
        }
        if self.str != 0 {
            os.write_int64(2, self.str)?;
        }
        if self.num != 0 {
            os.write_int64(3, self.num)?;
        }
        if self.num_unit != 0 {
            os.write_int64(4, self.num_unit)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Label {
        Label::new()
    }

    fn clear(&mut self) {
        self.key = 0;
        self.str = 0;
        self.num = 0;
        self.num_unit = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Label {
        static instance: Label = Label {
            key: 0,
            str: 0,
            num: 0,
            num_unit: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Label {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Label").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Label {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Label {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:perftools.profiles.Mapping)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct Mapping {
    // message fields
    // @@protoc_insertion_point(field:perftools.profiles.Mapping.id)
    pub id: u64,
    // @@protoc_insertion_point(field:perftools.profiles.Mapping.memory_start)
    pub memory_start: u64,
    // @@protoc_insertion_point(field:perftools.profiles.Mapping.memory_limit)
    pub memory_limit: u64,
    // @@protoc_insertion_point(field:perftools.profiles.Mapping.file_offset)
    pub file_offset: u64,
    // @@protoc_insertion_point(field:perftools.profiles.Mapping.filename)
    pub filename: i64,
    // @@protoc_insertion_point(field:perftools.profiles.Mapping.build_id)
    pub build_id: i64,
    // @@protoc_insertion_point(field:perftools.profiles.Mapping.has_functions)
    pub has_functions: bool,
    // @@protoc_insertion_point(field:perftools.profiles.Mapping.has_filenames)
    pub has_filenames: bool,
    // @@protoc_insertion_point(field:perftools.profiles.Mapping.has_line_numbers)
    pub has_line_numbers: bool,
    // @@protoc_insertion_point(field:perftools.profiles.Mapping.has_inline_frames)
    pub has_inline_frames: bool,
    // special fields
    // @@protoc_insertion_point(special_field:perftools.profiles.Mapping.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Mapping {
    fn default() -> &'a Mapping {
        <Mapping as ::protobuf::Message>::default_instance()
    }
}

impl Mapping {
    pub fn new() -> Mapping {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(10);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "id",
            |m: &Mapping| { &m.id },
            |m: &mut Mapping| { &mut m.id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "memory_start",
            |m: &Mapping| { &m.memory_start },
            |m: &mut Mapping| { &mut m.memory_start },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "memory_limit",
            |m: &Mapping| { &m.memory_limit },
            |m: &mut Mapping| { &mut m.memory_limit },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "file_offset",
            |m: &Mapping| { &m.file_offset },
            |m: &mut Mapping| { &mut m.file_offset },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "filename",
            |m: &Mapping| { &m.filename },
            |m: &mut Mapping| { &mut m.filename },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "build_id",
            |m: &Mapping| { &m.build_id },
            |m: &mut Mapping| { &mut m.build_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "has_functions",
            |m: &Mapping| { &m.has_functions },
            |m: &mut Mapping| { &mut m.has_functions },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "has_filenames",
            |m: &Mapping| { &m.has_filenames },
            |m: &mut Mapping| { &mut m.has_filenames },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "has_line_numbers",
            |m: &Mapping| { &m.has_line_numbers },
            |m: &mut Mapping| { &mut m.has_line_numbers },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "has_inline_frames",
            |m: &Mapping| { &m.has_inline_frames },
            |m: &mut Mapping| { &mut m.has_inline_frames },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Mapping>(
            "Mapping",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Mapping {
    const NAME: &'static str = "Mapping";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.id = is.read_uint64()?;
                },
                16 => {
                    self.memory_start = is.read_uint64()?;
                },
                24 => {
                    self.memory_limit = is.read_uint64()?;
                },
                32 => {
                    self.file_offset = is.read_uint64()?;
                },
                40 => {
                    self.filename = is.read_int64()?;
                },
                48 => {
                    self.build_id = is.read_int64()?;
                },
                56 => {
                    self.has_functions = is.read_bool()?;
                },
                64 => {
                    self.has_filenames = is.read_bool()?;
                },
                72 => {
                    self.has_line_numbers = is.read_bool()?;
                },
                80 => {
                    self.has_inline_frames = is.read_bool()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.id != 0 {
            my_size += ::protobuf::rt::uint64_size(1, self.id);
        }
        if self.memory_start != 0 {
            my_size += ::protobuf::rt::uint64_size(2, self.memory_start);
        }
        if self.memory_limit != 0 {
            my_size += ::protobuf::rt::uint64_size(3, self.memory_limit);
        }
        if self.file_offset != 0 {
            my_size += ::protobuf::rt::uint64_size(4, self.file_offset);
        }
        if self.filename != 0 {
            my_size += ::protobuf::rt::int64_size(5, self.filename);
        }
        if self.build_id != 0 {
            my_size += ::protobuf::rt::int64_size(6, self.build_id);
        }
        if self.has_functions != false {
            my_size += 1 + 1;
        }
        if self.has_filenames != false {
            my_size += 1 + 1;
        }
        if self.has_line_numbers != false {
            my_size += 1 + 1;
        }
        if self.has_inline_frames != false {
            my_size += 1 + 1;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.id != 0 {
            os.write_uint64(1, self.id)?;
        }
        if self.memory_start != 0 {
            os.write_uint64(2, self.memory_start)?;
        }
        if self.memory_limit != 0 {
            os.write_uint64(3, self.memory_limit)?;
        }
        if self.file_offset != 0 {
            os.write_uint64(4, self.file_offset)?;
        }
        if self.filename != 0 {
            os.write_int64(5, self.filename)?;
        }
        if self.build_id != 0 {
            os.write_int64(6, self.build_id)?;
        }
        if self.has_functions != false {
            os.write_bool(7, self.has_functions)?;
        }
        if self.has_filenames != false {
            os.write_bool(8, self.has_filenames)?;
        }
        if self.has_line_numbers != false {
            os.write_bool(9, self.has_line_numbers)?;
        }
        if self.has_inline_frames != false {
            os.write_bool(10, self.has_inline_frames)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Mapping {
        Mapping::new()
    }

    fn clear(&mut self) {
        self.id = 0;
        self.memory_start = 0;
        self.memory_limit = 0;
        self.file_offset = 0;
        self.filename = 0;
        self.build_id = 0;
        self.has_functions = false;
        self.has_filenames = false;
        self.has_line_numbers = false;
        self.has_inline_frames = false;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Mapping {
        static instance: Mapping = Mapping {
            id: 0,
            memory_start: 0,
            memory_limit: 0,
            file_offset: 0,
            filename: 0,
            build_id: 0,
            has_functions: false,
            has_filenames: false,
            has_line_numbers: false,
            has_inline_frames: false,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Mapping {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Mapping").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Mapping {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Mapping {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:perftools.profiles.Location)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct Location {
    // message fields
    // @@protoc_insertion_point(field:perftools.profiles.Location.id)
    pub id: u64,
    // @@protoc_insertion_point(field:perftools.profiles.Location.mapping_id)
    pub mapping_id: u64,
    // @@protoc_insertion_point(field:perftools.profiles.Location.address)
    pub address: u64,
    // @@protoc_insertion_point(field:perftools.profiles.Location.line)
    pub line: ::std::vec::Vec<Line>,
    // @@protoc_insertion_point(field:perftools.profiles.Location.is_folded)
    pub is_folded: bool,
    // special fields
    // @@protoc_insertion_point(special_field:perftools.profiles.Location.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Location {
    fn default() -> &'a Location {
        <Location as ::protobuf::Message>::default_instance()
    }
}

impl Location {
    pub fn new() -> Location {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(5);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "id",
            |m: &Location| { &m.id },
            |m: &mut Location| { &mut m.id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "mapping_id",
            |m: &Location| { &m.mapping_id },
            |m: &mut Location| { &mut m.mapping_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "address",
            |m: &Location| { &m.address },
            |m: &mut Location| { &mut m.address },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "line",
            |m: &Location| { &m.line },
            |m: &mut Location| { &mut m.line },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "is_folded",
            |m: &Location| { &m.is_folded },
            |m: &mut Location| { &mut m.is_folded },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Location>(
            "Location",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Location {
    const NAME: &'static str = "Location";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.id = is.read_uint64()?;
                },
                16 => {
                    self.mapping_id = is.read_uint64()?;
                },
                24 => {
                    self.address = is.read_uint64()?;
                },
                34 => {
                    self.line.push(is.read_message()?);
                },
                40 => {
                    self.is_folded = is.read_bool()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.id != 0 {
            my_size += ::protobuf::rt::uint64_size(1, self.id);
        }
        if self.mapping_id != 0 {
            my_size += ::protobuf::rt::uint64_size(2, self.mapping_id);
        }
        if self.address != 0 {
            my_size += ::protobuf::rt::uint64_size(3, self.address);
        }
        for value in &self.line {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if self.is_folded != false {
            my_size += 1 + 1;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.id != 0 {
            os.write_uint64(1, self.id)?;
        }
        if self.mapping_id != 0 {
            os.write_uint64(2, self.mapping_id)?;
        }
        if self.address != 0 {
            os.write_uint64(3, self.address)?;
        }
        for v in &self.line {
            ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
        };
        if self.is_folded != false {
            os.write_bool(5, self.is_folded)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Location {
        Location::new()
    }

    fn clear(&mut self) {
        self.id = 0;
        self.mapping_id = 0;
        self.address = 0;
        self.line.clear();
        self.is_folded = false;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Location {
        static instance: Location = Location {
            id: 0,
            mapping_id: 0,
            address: 0,
            line: ::std::vec::Vec::new(),
            is_folded: false,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Location {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Location").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Location {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Location {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:perftools.profiles.Line)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct Line {
    // message fields
    // @@protoc_insertion_point(field:perftools.profiles.Line.function_id)
    pub function_id: u64,
    // @@protoc_insertion_point(field:perftools.profiles.Line.line)
    pub line: i64,
    // special fields
    // @@protoc_insertion_point(special_field:perftools.profiles.Line.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Line {
    fn default() -> &'a Line {
        <Line as ::protobuf::Message>::default_instance()
    }
}

impl Line {
    pub fn new() -> Line {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "function_id",
            |m: &Line| { &m.function_id },
            |m: &mut Line| { &mut m.function_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "line",
            |m: &Line| { &m.line },
            |m: &mut Line| { &mut m.line },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Line>(
            "Line",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Line {
    const NAME: &'static str = "Line";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.function_id = is.read_uint64()?;
                },
                16 => {
                    self.line = is.read_int64()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.function_id != 0 {
            my_size += ::protobuf::rt::uint64_size(1, self.function_id);
        }
        if self.line != 0 {
            my_size += ::protobuf::rt::int64_size(2, self.line);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.function_id != 0 {
            os.write_uint64(1, self.function_id)?;
        }
        if self.line != 0 {
            os.write_int64(2, self.line)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Line {
        Line::new()
    }

    fn clear(&mut self) {
        self.function_id = 0;
        self.line = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Line {
        static instance: Line = Line {
            function_id: 0,
            line: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Line {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Line").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Line {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Line {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:perftools.profiles.Function)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct Function {
    // message fields
    // @@protoc_insertion_point(field:perftools.profiles.Function.id)
    pub id: u64,
    // @@protoc_insertion_point(field:perftools.profiles.Function.name)
    pub name: i64,
    // @@protoc_insertion_point(field:perftools.profiles.Function.system_name)
    pub system_name: i64,
    // @@protoc_insertion_point(field:perftools.profiles.Function.filename)
    pub filename: i64,
    // @@protoc_insertion_point(field:perftools.profiles.Function.start_line)
    pub start_line: i64,
    // special fields
    // @@protoc_insertion_point(special_field:perftools.profiles.Function.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Function {
    fn default() -> &'a Function {
        <Function as ::protobuf::Message>::default_instance()
    }
}

impl Function {
    pub fn new() -> Function {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(5);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "id",
            |m: &Function| { &m.id },
            |m: &mut Function| { &mut m.id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "name",
            |m: &Function| { &m.name },
            |m: &mut Function| { &mut m.name },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "system_name",
            |m: &Function| { &m.system_name },
            |m: &mut Function| { &mut m.system_name },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "filename",
            |m: &Function| { &m.filename },
            |m: &mut Function| { &mut m.filename },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "start_line",
            |m: &Function| { &m.start_line },
            |m: &mut Function| { &mut m.start_line },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Function>(
            "Function",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Function {
    const NAME: &'static str = "Function";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.id = is.read_uint64()?;
                },
                16 => {
                    self.name = is.read_int64()?;
                },
                24 => {
                    self.system_name = is.read_int64()?;
                },
                32 => {
                    self.filename = is.read_int64()?;
                },
                40 => {
                    self.start_line = is.read_int64()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.id != 0 {
            my_size += ::protobuf::rt::uint64_size(1, self.id);
        }
        if self.name != 0 {
            my_size += ::protobuf::rt::int64_size(2, self.name);
        }
        if self.system_name != 0 {
            my_size += ::protobuf::rt::int64_size(3, self.system_name);
        }
        if self.filename != 0 {
            my_size += ::protobuf::rt::int64_size(4, self.filename);
        }
        if self.start_line != 0 {
            my_size += ::protobuf::rt::int64_size(5, self.start_line);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.id != 0 {
            os.write_uint64(1, self.id)?;
        }
        if self.name != 0 {
            os.write_int64(2, self.name)?;
        }
        if self.system_name != 0 {
            os.write_int64(3, self.system_name)?;
        }
        if self.filename != 0 {
            os.write_int64(4, self.filename)?;
        }
        if self.start_line != 0 {
            os.write_int64(5, self.start_line)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Function {
        Function::new()
    }

    fn clear(&mut self) {
        self.id = 0;
        self.name = 0;
        self.system_name = 0;
        self.filename = 0;
        self.start_line = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Function {
        static instance: Function = Function {
            id: 0,
            name: 0,
            system_name: 0,
            filename: 0,
            start_line: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Function {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Function").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Function {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Function {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x14protos/profile.proto\x12\x12perftools.profiles\"\xf5\x04\n\x07Prof\
    ile\x12>\n\x0bsample_type\x18\x01\x20\x03(\x0b2\x1d.perftools.profiles.V\
    alueTypeR\nsampleType\x122\n\x06sample\x18\x02\x20\x03(\x0b2\x1a.perftoo\
    ls.profiles.SampleR\x06sample\x125\n\x07mapping\x18\x03\x20\x03(\x0b2\
    \x1b.perftools.profiles.MappingR\x07mapping\x128\n\x08location\x18\x04\
    \x20\x03(\x0b2\x1c.perftools.profiles.LocationR\x08location\x128\n\x08fu\
    nction\x18\x05\x20\x03(\x0b2\x1c.perftools.profiles.FunctionR\x08functio\
    n\x12!\n\x0cstring_table\x18\x06\x20\x03(\tR\x0bstringTable\x12\x1f\n\
    \x0bdrop_frames\x18\x07\x20\x01(\x03R\ndropFrames\x12\x1f\n\x0bkeep_fram\
    es\x18\x08\x20\x01(\x03R\nkeepFrames\x12\x1d\n\ntime_nanos\x18\t\x20\x01\
    (\x03R\ttimeNanos\x12%\n\x0eduration_nanos\x18\n\x20\x01(\x03R\rduration\
    Nanos\x12>\n\x0bperiod_type\x18\x0b\x20\x01(\x0b2\x1d.perftools.profiles\
    .ValueTypeR\nperiodType\x12\x16\n\x06period\x18\x0c\x20\x01(\x03R\x06per\
    iod\x12\x18\n\x07comment\x18\r\x20\x03(\x03R\x07comment\x12.\n\x13defaul\
    t_sample_type\x18\x0e\x20\x01(\x03R\x11defaultSampleType\"3\n\tValueType\
    \x12\x12\n\x04type\x18\x01\x20\x01(\x03R\x04type\x12\x12\n\x04unit\x18\
    \x02\x20\x01(\x03R\x04unit\"p\n\x06Sample\x12\x1f\n\x0blocation_id\x18\
    \x01\x20\x03(\x04R\nlocationId\x12\x14\n\x05value\x18\x02\x20\x03(\x03R\
    \x05value\x12/\n\x05label\x18\x03\x20\x03(\x0b2\x19.perftools.profiles.L\
    abelR\x05label\"X\n\x05Label\x12\x10\n\x03key\x18\x01\x20\x01(\x03R\x03k\
    ey\x12\x10\n\x03str\x18\x02\x20\x01(\x03R\x03str\x12\x10\n\x03num\x18\
    \x03\x20\x01(\x03R\x03num\x12\x19\n\x08num_unit\x18\x04\x20\x01(\x03R\
    \x07numUnit\"\xd7\x02\n\x07Mapping\x12\x0e\n\x02id\x18\x01\x20\x01(\x04R\
    \x02id\x12!\n\x0cmemory_start\x18\x02\x20\x01(\x04R\x0bmemoryStart\x12!\
    \n\x0cmemory_limit\x18\x03\x20\x01(\x04R\x0bmemoryLimit\x12\x1f\n\x0bfil\
    e_offset\x18\x04\x20\x01(\x04R\nfileOffset\x12\x1a\n\x08filename\x18\x05\
    \x20\x01(\x03R\x08filename\x12\x19\n\x08build_id\x18\x06\x20\x01(\x03R\
    \x07buildId\x12#\n\rhas_functions\x18\x07\x20\x01(\x08R\x0chasFunctions\
    \x12#\n\rhas_filenames\x18\x08\x20\x01(\x08R\x0chasFilenames\x12(\n\x10h\
    as_line_numbers\x18\t\x20\x01(\x08R\x0ehasLineNumbers\x12*\n\x11has_inli\
    ne_frames\x18\n\x20\x01(\x08R\x0fhasInlineFrames\"\x9e\x01\n\x08Location\
    \x12\x0e\n\x02id\x18\x01\x20\x01(\x04R\x02id\x12\x1d\n\nmapping_id\x18\
    \x02\x20\x01(\x04R\tmappingId\x12\x18\n\x07address\x18\x03\x20\x01(\x04R\
    \x07address\x12,\n\x04line\x18\x04\x20\x03(\x0b2\x18.perftools.profiles.\
    LineR\x04line\x12\x1b\n\tis_folded\x18\x05\x20\x01(\x08R\x08isFolded\";\
    \n\x04Line\x12\x1f\n\x0bfunction_id\x18\x01\x20\x01(\x04R\nfunctionId\
    \x12\x12\n\x04line\x18\x02\x20\x01(\x03R\x04line\"\x8a\x01\n\x08Function\
    \x12\x0e\n\x02id\x18\x01\x20\x01(\x04R\x02id\x12\x12\n\x04name\x18\x02\
    \x20\x01(\x03R\x04name\x12\x1f\n\x0bsystem_name\x18\x03\x20\x01(\x03R\ns\
    ystemName\x12\x1a\n\x08filename\x18\x04\x20\x01(\x03R\x08filename\x12\
    \x1d\n\nstart_line\x18\x05\x20\x01(\x03R\tstartLineB-\n\x1dcom.google.pe\
    rftools.profilesB\x0cProfileProtob\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(8);
            messages.push(Profile::generated_message_descriptor_data());
            messages.push(ValueType::generated_message_descriptor_data());
            messages.push(Sample::generated_message_descriptor_data());
            messages.push(Label::generated_message_descriptor_data());
            messages.push(Mapping::generated_message_descriptor_data());
            messages.push(Location::generated_message_descriptor_data());
            messages.push(Line::generated_message_descriptor_data());
            messages.push(Function::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
